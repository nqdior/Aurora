<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MSSQL_COLUMNS" xml:space="preserve">
    <value>SELECT b.name AS "tableName", a.name AS "columnName", c.name AS "type", a.column_id AS "order", a.max_length AS "length", a.precision, a.scale, CASE WHEN a.is_nullable = 0 THEN '×' ELSE '〇' END AS "boolnull", CASE WHEN a.is_identity = 0 THEN '0' ELSE '1' END AS "オートナンバー", CASE WHEN a.default_object_id = 0 THEN '×' ELSE d.definition END AS 'デフォルト値', CASE WHEN f.index_column_id IS NOT NULL AND e.is_primary_key = 1 THEN 'PK' ELSE '×' END AS 'PK' FROM sys.columns AS a LEFT OUTER JOIN sys.objects AS b ON  a.object_id = b.object_id LEFT OUTER JOIN sys.types AS c ON  a.system_type_id = c.system_type_id LEFT OUTER JOIN sys.default_constraints AS d ON  a.default_object_id = d.object_id LEFT OUTER JOIN sys.indexes AS e ON  a.object_id = e.object_id AND e.is_primary_key = 1 LEFT OUTER JOIN sys.index_columns AS f ON  a.object_id = f.object_id AND a.column_id = f.column_id WHERE b.TYPE = 'U' AND c.name != 'sysname' ORDER BY b.name, a.column_id</value>
  </data>
  <data name="MSSQL_DATABASES" xml:space="preserve">
    <value>SELECT name FROM sys.databases ORDER BY database_id;</value>
  </data>
  <data name="MSSQL_TABLES" xml:space="preserve">
    <value>SELECT o.name AS name, i.Rows AS rows, COUNT(s.column_id) AS columns FROM sysindexes i, sysobjects o INNER JOIN sys.columns s ON  s.object_id = o.id WHERE o.xtype = 'U' AND o.id = i.id AND i.indid &lt; 2 AND o.name &lt;&gt; 'dtproperties' GROUP BY o.name, i.Rows ORDER BY o.name;</value>
  </data>
  <data name="MYSQL_COLUMNS" xml:space="preserve">
    <value>SELECT table_name AS 'tableName', column_name AS 'columnName', data_type AS 'type', character_maximum_length AS 'length', CASE WHEN is_nullable = 'NO' THEN '×' ELSE '〇' END AS 'boolnull', column_key AS 'pk' FROM information_schema.columns</value>
  </data>
  <data name="MYSQL_DATABASES" xml:space="preserve">
    <value>SHOW Databases;</value>
  </data>
  <data name="MYSQL_TABLES" xml:space="preserve">
    <value>SELECT T.table_name AS 'name', cast(T.table_rows AS signed int) AS 'rows', cast(COUNT(*) AS signed int) AS 'columns' FROM information_schema.Tables T LEFT OUTER JOIN information_schema.columns C ON  T.table_catalog = C.table_catalog AND T.table_schema = C.table_schema AND T.table_name = C.table_name WHERE T.table_schema = '{0}' GROUP BY T.table_catalog, T.table_schema, T.table_name, T.table_rows;</value>
  </data>
  <data name="ORACLE_COLUMNS" xml:space="preserve">
    <value>SELECT * FROM USER_TAB_COLUMNS;</value>
  </data>
  <data name="ORACLE_TABLES" xml:space="preserve">
    <value>SELECT table_name AS name FROM user_tables;</value>
  </data>
  <data name="PGSQL_COLUMNS" xml:space="preserve">
    <value>SELECT c.table_name AS tableName, c.column_name AS columnName, c.data_type AS TYPE, c.character_maximum_length AS LENGTH, CASE WHEN is_nullable = 'NO' THEN '×' ELSE '〇' END AS boolnull, CASE WHEN tc.constraint_type = 'PRIMARY KEY' THEN '〇' ELSE '×' END AS pk FROM information_schema.columns c LEFT OUTER JOIN information_schema.constraint_column_usage ccu ON  c.table_name = ccu.table_name AND c.column_name = ccu.column_name LEFT OUTER JOIN information_schema.table_constraints tc ON  tc.table_catalog = c.table_catalog AND tc.table_schema = c.table_schema AND tc.table_name = c.table_name AND tc.constraint_name = ccu.constraint_name WHERE c.table_catalog = '{0}' ORDER BY c.table_name, c.ordinal_position</value>
  </data>
  <data name="PGSQL_DATABASES" xml:space="preserve">
    <value>SELECT datname AS name FROM pg_database;</value>
  </data>
  <data name="PGSQL_TABLES" xml:space="preserve">
    <value>SELECT relname AS name FROM pg_stat_user_tables;</value>
  </data>
  <data name="SQLITE_COLUMNS" xml:space="preserve">
    <value>PRAGMA TABLE_INFO({0});</value>
  </data>
  <data name="SQLITE_TABLES" xml:space="preserve">
    <value>SELECT name FROM sqlite_master WHERE TYPE = 'table';</value>
  </data>
</root>